@startuml operation.provide-dispensation-erp
skinparam defaultTextAlignment center
skinparam title {
  backgroundColor SkyBlue
  borderColor Gray
} 
title $provide-dispensation-erp

start

  repeat:Get next <b>RxDispensation</b> from <b>Input-Parameters</b>;
  
    :Validate all <b>Medication</b>, <b>Organization</b> and <b>MedicationDispense</b> from <b>Input-Parameters</b>[x].<b>RxDispensation</b>.part;

    if (\rValidation successfull\r) then (yes)
      
      :Generate <b>RxPrescriptionProcessIdentifier</b> from values of 
      <b>Input-Parameters</b>[x].<b>RxDispensation</b>.part.<b>authoredOn</b> and  
      <b>Input-Parameters</b>[x].<b>RxDispensation</b>.part.<b>PrescriptionId</b>;


      if(\rCheck whether there is a <b>MedicationRequest</b> with <b>RxPrescriptionProcessIdentifier</b> \n and \n status NOT <b>completed</b>\r) then (no)
        
        #Pink:Add error <b>OperationOutcome</b> (MEDICATIONSVC_PRESCRIPTION_NO_EXIST) \nor (MEDICATIONSVC_PRESCRIPTION_STATUS) to <b>Output-Parameters</b>; 
      
      else (yes)

        partition transaction {
        
          :Set all <b>MedicationDispense</b> with  
          extension[RxPrescriptionProcessIdentifier] equal to <b>RxPrescriptionProcessIdentifier</b> 
          in Medication Service to Status <b>declined</b>;

          :Set all <b>Medication</b> with  
          extension[RxPrescriptionProcessIdentifier] equal to <b>RxPrescriptionProcessIdentifier</b>
          to Status <b>inactive</b>;

          :Check for existing <b>Organization</b> with TelematikID from \n <b>Input-Parameters</b>[x].<b>RxDispensation</b>.part.<b>Organization</b>;

          if (<b>Organization</b> exists?) then (yes)

            :<< Update >> 
            <b>Organization</b>
            <i>from <b>Input-Parameters</b>[x].<b>RxDispensation</b>.part.<b>Organization</b></i>
            
            identifier[TelematikID] = Value(TelematikID)
            <i>Replace all other elements with given resource instance</i>;

          else (no)

            :<< Create >> 
            <b>Organization</b>
            <i>from <b>Input-Parameters</b>[x].<b>RxDispensation</b>.part.<b>Organization</b></i>
           
            identifier[TelematikID] = Value(TelematikID)
            <i>Set all other elements with given resource instance</i>;

          endif

          partition loop {
            
            repeat: Get next <b>MedicationDispense</b> from current <b>RxDispensation</b> <b>Input-Parameters</b> part list;
            
            If(\rCheck whether <b>MedicationDispense</b> from \n <b>Input-Parameters</b>[x].<b>RxDispensation</b>.part in medication[x] \n uses a <b>Data Absent Reason Extension</b>. \n This indicates that <b>MedicationDispense</b> does not \n reference any <b>Medication</b>\r) then (<b>NOT USE</b> a <b>Data Absent Reason Extension</b>)

              :\rGet <b>Medication</b> resource referenced by  <b>MedicationDispense</b> \n from <b>Input-Parameters</b>[x].<b>RxDispensation</b>.part\r;

              :Generate for <b>EPAMedicationUniqueIdentifier</b> from hashed Input-<b>Medication</b>;
              
              If(\rVerify whether there is a <b>Medication</b> with  <b>RxPrescriptionProcessIdentifier</b> extension \nand\n  generated hash for <b>EPAMedicationUniqueIdentifier</b> in the Medication Service\r) then (yes)
                
                :Update <b>Medication</b> with <b>RxPrescriptionProcessIdentifier</b> extenstion
                and <b>EPAMedicationUniqueIdentifier</b> to Status <b>active</b>;

              else (no)

                :Generate for <b>RxOriginatorProcessIdentifier</b> from values of 
                <b>Input-Parameters</b>[x].<b>RxDispensation</b>.part.<b>Medication</b>.Id and Input-<b>PrescriptionId</b>;

                :<< Create >> 
                <b>Medication</b>
                <i>from <b>Input-Parameters</b>[x].<b>RxDispensation</b>.part.<b>Medication</b></i>
                ====
                identifier[<b>EPAMedicationUniqueIdentifier</b>] = Value(EPAMedicationUniqueIdentifier)
                identifier[<b>RxOriginatorProcessIdentifier</b>] = Value(RxOriginatorProcessIdentifier)
                extension[<b>RxPrescriptionProcessIdentifier</b>] = Value(RxPrescriptionProcessIdentifier)
                status = <b>active</b>
                <i>Set all other elements with given resource instance</i>;

              endif

            else (<b>USE</b> a <b>Data Absent Reason Extension</b>)

              :Use of <b>Medication</b> instance referenced by <b>MedicationRequest</b> \n instance with  <b>RxPrescriptionProcessIdentifier</b>;

              :Update <b>Medication</b> instance referenced by <b>MedicationRequest</b> to status <b>active</b>;
            endif

            :Generate for <b>RxOriginatorProcessIdentifier</b> from values of 
            <b>Input-Parameters</b>[x].<b>RxDispensation</b>.part.<b>MedicationDispense</b>.Id and Input-<b>PrescriptionId</b>;

            :<< Create >>
            <b>MedicationDispense</b>
            <i>from <b>Input-Parameters</b>[x].<b>RxDispensation</b>.part.<b>MedicationDispense</b></i>
            =====
            identifier[<b>RxOriginatorProcessIdentifier</b>] = Value(RxOriginatorProcessIdentifier)
            extension[<b>RxPrescriptionProcessIdentifier</b>] = Value(RxPrescriptionProcessIdentifier)
            medicationReference = Reference(<b>Medication</b>)
            performer.actor = Reference(<b>Organization</b>)
            authorizingPrescription = Reference(<b>MedicationRequest</b>)
            status = <b>completed</b>;

            repeat while (\rIf next <b>MedicationDispense</b> in <b>Input-Parameters</b> <b>RxDispensation</b> part list exists\r) is (yes) not (no)
          }
          
          :Set <b>MedicationRequest</b> with <b>RxPrescriptionProcessIdentifier</b> 
          to Status <b>completed</b>;

          #PaleGreen:Add information <b>OperationOutcome</b> (MEDICATIONSVC_OPERATION_SUCCESS) to <b>Output-Parameters</b>;
     
        }
      endif

    else (no)
      
      #Pink:Add error <b>OperationOutcome</b> (NO_VALID_STRUCTURE) to  <b>Output-Parameters</b>;
    
    endif
  
  repeat while (If next <b>Input-Parameters</b> exists) is (yes) not (no)

:Return "<b>Output-Parameters</b>";
stop    
@enduml